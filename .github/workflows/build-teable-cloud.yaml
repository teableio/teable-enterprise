name: Build teable cloud

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_dispatch:
  repository_dispatch:
    types: [build-cloud]

jobs:
  track-start:
    uses: ./.github/workflows/track-build-teable.yaml
    with:
      action: create
      edition: cloud
      status: Building
    secrets:
      TEABLE_API_TOKEN: ${{ secrets.TEABLE_API_TOKEN }}
      PACKAGES_KEY: ${{ secrets.PACKAGES_KEY }}

  build-push:
    needs: track-start
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [app, db-migrate, sandbox]
        include:
          - target: app
            file: Dockerfile
            image: teable-cloud
          - target: db-migrate
            file: Dockerfile.db-migrate
            image: teable-db-migrate-cloud
          - target: sandbox
            file: Dockerfile.sandbox
            image: teable-sandbox-cloud

    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: teableio/teable-ee
          token: ${{ secrets.PACKAGES_KEY }}
          submodules: "true"

      - name: Get teable-ee SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_KEY }}

      - name: Login to Ali container registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shenzhen.aliyuncs.com
          username: ${{ vars.ALI_DOCKER_USERNAME }}
          password: ${{ secrets.ALI_DOCKER_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
      - name: ⚙️ Install zx
        run: npm install -g zx

      - name: ⚙️ Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            registry.cn-shenzhen.aliyuncs.com/teable/${{ matrix.image }}
            ghcr.io/teableio/${{ matrix.image }}
            649941507946.dkr.ecr.us-west-2.amazonaws.com/teable/${{ matrix.image }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.get_sha.outputs.sha }}
            type=raw,value=${{ needs.track-start.outputs.version_tag }}

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 📦 Build and push
        run: |
          zx scripts/build-image.mjs --file=dockers/teable/${{ matrix.file }} \
              --build-arg="ENABLE_CSP=false" \
              --build-arg="NEXT_BUILD_ENV_EDITION=CLOUD" \
              --tag="${{ steps.meta.outputs.tags }}" \
              --platform="linux/amd64" \
              --push \
              --upload-assets-list='[["aws-objectstorage","https://s3.us-west-2.amazonaws.com","${{ secrets.AWS_ACCESS_KEY_ID }}","${{ secrets.AWS_SECRET_ACCESS_KEY }}","teable-next-asset"],["sealos-objectstorage","https://objectstorageapi.hzh.sealos.run","${{ secrets.SEALOS_OBJECTSTORAGE_ACCESS_KEY }}","${{ secrets.SEALOS_OBJECTSTORAGE_SECRET_KEY }}","38puz7wo-teable-public"]]'

  determine-status:
    needs: [track-start, build-push]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:
      - name: Determine final status
        id: status
        run: |
          if [ "${{ needs.build-push.result }}" == "success" ]; then
            echo "status=Released" >> $GITHUB_OUTPUT
          else
            echo "status=Fail" >> $GITHUB_OUTPUT
          fi

  track-complete:
    needs: [track-start, build-push, determine-status]
    if: always()
    uses: ./.github/workflows/track-build-teable.yaml
    with:
      action: update
      edition: cloud
      record_id: ${{ needs.track-start.outputs.record_id }}
      status: ${{ needs.determine-status.outputs.status }}
      start_time: ${{ needs.track-start.outputs.start_time }}
    secrets:
      TEABLE_API_TOKEN: ${{ secrets.TEABLE_API_TOKEN }}
      PACKAGES_KEY: ${{ secrets.PACKAGES_KEY }}
