name: Build teable EE

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY_GITHUB: ghcr.io/teableio
  REGISTRY_DOCKERHUB: docker.io/teableio
  REGISTRY_ALI: registry.cn-shenzhen.aliyuncs.com/teable
  CE_IMAGE_SUFFIX: ""
  EE_IMAGE_SUFFIX: "-ee"

on:
  workflow_dispatch:
  repository_dispatch:
    types: [build-ee]

jobs:
  track-start:
    uses: ./.github/workflows/track-build-teable.yaml
    with:
      action: create
      edition: ee
      status: Building
    secrets:
      TEABLE_API_TOKEN: ${{ secrets.TEABLE_API_TOKEN }}
      PACKAGES_KEY: ${{ secrets.PACKAGES_KEY }}

  build-push:
    needs: track-start
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [app, db-migrate, sandbox]
        arch: [amd64, arm64]
        include:
          - target: app
            file: Dockerfile
            image: teable
          - target: db-migrate
            file: Dockerfile.db-migrate
            image: teable-db-migrate
          - target: sandbox
            file: Dockerfile.sandbox
            image: teable-sandbox

    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: teableio/teable-ee
          token: ${{ secrets.PACKAGES_KEY }}
          submodules: "true"

      - name: Get teable-ee SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_KEY }}

      - name: Login to Docker Hub registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_AK }}

      - name: Login to Ali container registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shenzhen.aliyuncs.com
          username: ${{ vars.ALI_DOCKER_USERNAME }}
          password: ${{ secrets.ALI_DOCKER_PASSWORD }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
      - name: ⚙️ Install zx
        run: npm install -g zx

      - name: ⚙️ Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_ALI }}/${{ matrix.image }}${{ env.CE_IMAGE_SUFFIX }}
            ${{ env.REGISTRY_GITHUB }}/${{ matrix.image }}${{ env.CE_IMAGE_SUFFIX }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ matrix.image }}${{ env.CE_IMAGE_SUFFIX }}
            ${{ env.REGISTRY_ALI }}/${{ matrix.image }}${{ env.EE_IMAGE_SUFFIX }}
            ${{ env.REGISTRY_GITHUB }}/${{ matrix.image }}${{ env.EE_IMAGE_SUFFIX }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ matrix.image }}${{ env.EE_IMAGE_SUFFIX }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.get_sha.outputs.sha }}
            type=raw,value=${{ needs.track-start.outputs.version_tag }}

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 📦 Build and push
        run: |
          zx scripts/build-image.mjs --file=dockers/teable/${{ matrix.file }} \
              --build-arg="ENABLE_CSP=false" \
              --build-arg="NEXT_BUILD_ENV_EDITION=EE" \
              --tag="${{ steps.meta.outputs.tags }}" \
              --platform="linux/${{ matrix.arch }}" \
              --push

  create-manifest:
    needs: [track-start, build-push]
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.start_time.outputs.start }}
      main_commit_sha: ${{ steps.get_sha.outputs.sha }}
      main_commit_author: ${{ steps.get_main_commit_info.outputs.author }}
      main_commit_message: ${{ steps.get_main_commit_info.outputs.message }}
      submodule_commit_sha: ${{ steps.get_submodule_commit.outputs.submodule_sha }}
      submodule_commit_author: ${{ steps.get_submodule_commit.outputs.submodule_author }}
      submodule_commit_message: ${{ steps.get_submodule_commit.outputs.submodule_message }}
    strategy:
      matrix:
        target: [app, db-migrate, sandbox]
        include:
          - target: app
            image: teable
          - target: db-migrate
            image: teable-db-migrate
          - target: sandbox
            image: teable-sandbox

    steps:
      - name: Record start time
        id: start_time
        run: echo "start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: teableio/teable-ee
          token: ${{ secrets.PACKAGES_KEY }}
          submodules: "true"

      - name: Get teable-ee SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_KEY }}

      - name: Login to Docker Hub registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_AK }}

      - name: Login to Ali container registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shenzhen.aliyuncs.com
          username: ${{ vars.ALI_DOCKER_USERNAME }}
          password: ${{ secrets.ALI_DOCKER_PASSWORD }}

      - name: Create and push manifest
        run: |
          REGISTRIES=("${{ env.REGISTRY_ALI }}" "${{ env.REGISTRY_GITHUB }}" "${{ env.REGISTRY_DOCKERHUB }}")
          TAGS=("latest" "${{ steps.get_sha.outputs.sha }}")
          SUFFIXES=("${{ env.CE_IMAGE_SUFFIX }}" "${{ env.EE_IMAGE_SUFFIX }}")

          for REGISTRY in "${REGISTRIES[@]}"; do
            for TAG in "${TAGS[@]}"; do
              for SUFFIX in "${SUFFIXES[@]}"; do
                docker manifest create ${REGISTRY}/${{ matrix.image }}${SUFFIX}:${TAG} \
                  ${REGISTRY}/${{ matrix.image }}${SUFFIX}:${TAG}-amd64 \
                  ${REGISTRY}/${{ matrix.image }}${SUFFIX}:${TAG}-arm64
              
                docker manifest push ${REGISTRY}/${{ matrix.image }}${SUFFIX}:${TAG}
              done
            done
          done

      - name: Get community submodule commit info
        if: matrix.target == 'app'  # Only run once
        id: get_submodule_commit
        run: |
          cd community
          echo "submodule_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "submodule_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
          echo "submodule_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT

      - name: Get main commit info
        if: matrix.target == 'app'  # Only run once
        id: get_main_commit_info
        run: |
          echo "message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT

  determine-status:
    needs: [track-start, create-manifest]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:
      - name: Determine final status
        id: status
        run: |
          if [ "${{ needs.create-manifest.result }}" == "success" ]; then
            echo "status=Released" >> $GITHUB_OUTPUT
          else
            echo "status=Fail" >> $GITHUB_OUTPUT
          fi

  track-complete:
    needs: [track-start, create-manifest, determine-status]
    if: always()
    uses: ./.github/workflows/track-build-teable.yaml
    with:
      action: update
      edition: ee
      record_id: ${{ needs.track-start.outputs.record_id }}
      status: ${{ needs.determine-status.outputs.status }}
      start_time: ${{ needs.track-start.outputs.start_time }}
    secrets:
      TEABLE_API_TOKEN: ${{ secrets.TEABLE_API_TOKEN }}
      PACKAGES_KEY: ${{ secrets.PACKAGES_KEY }}
